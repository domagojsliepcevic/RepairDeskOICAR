@page "/admin/pos/{id:int}/orders"
@inject IRepairDeskApiClient httpClient
@inject IToastService toastService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navMan

@if (isAdmin)
{
    <h3>POS Orders</h3>

    <p>POS ID: @id</p>

    @if (pagedResult == null)
    {
        <p>Loading...</p>
    }
    else if (pagedResult.Items.IsNullOrEmpty())
    {
        <p>No orders found for this POS.</p>
    }
    else
    {
        <table>
            <thead>
                <tr>
                    <th>#</th>
                    <th>Date</th>
                    <th>Total</th>
                    <th>Status</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in pagedResult.Items)
                {
                    <tr>
                        <td>@order.Id</td>
                        <td>@order.OrderDate.ToString("d")</td>
                        <td>@order.TotalAmount.ToString("C")</td>
                        <td>@order.Status</td>
                        <td><a href="@($"/admin/pos/{id}/orders/{order.Id}")">Details</a></td>

                    </tr>
                }
            </tbody>
        </table>

        <div class="pagination">
            <button class="prev-btn" disabled="@IsFirstPage" @onclick="GoToPreviousPage">Previous</button>
            <span class="page-info">Page @pagedResult.CurrentPage of @pagedResult.TotalPages</span>
            <button class="next-btn" disabled="@IsLastPage" @onclick="GoToNextPage">Next</button>
        </div>
    }
}
else
{
    <div>Unauthorized</div>
}


@code {
    [Parameter]
    public int id { get; set; } // posId

    private ClaimsPrincipal principal { get; set; }
    private bool isAdmin { get; set; }

    private OrderListModelPagedResult pagedResult;
    private bool IsFirstPage => pagedResult.CurrentPage == 1;
    private bool IsLastPage => pagedResult.CurrentPage == pagedResult.TotalPages;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authStateProvider.GetAuthenticationStateAsync();
            principal = authState.User;
            if (!principal.Identity.IsAuthenticated)
            {
                navMan.NavigateTo("/user/login");
            }
            else
            {
                isAdmin = principal.HasRole("admin");
                if (isAdmin)
                {
                    await LoadPage(1);
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }


    /* pagination */
    private async Task LoadPage(int pageNumber)
    {
        try
        {
            pagedResult = await httpClient.GetOrdersByPOSPageAsync(id, pageNumber);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    private async Task GoToPreviousPage()
    {
        if (!IsFirstPage)
        {
            await LoadPage(pagedResult.CurrentPage - 1);
        }
    }

    private async Task GoToNextPage()
    {
        if (!IsLastPage)
        {
            await LoadPage(pagedResult.CurrentPage + 1);
        }
    }
}