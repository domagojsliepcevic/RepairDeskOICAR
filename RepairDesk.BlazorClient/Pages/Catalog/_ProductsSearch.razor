@page "/catalog/products/search"
@inject IRepairDeskApiClient httpClient

<h3>Product Search</h3>

<div>
    <input type="text" @bind="searchText" placeholder="Enter product name..." />
    <button @onclick="Search">Search</button>
</div>

@if (displayedProducts == null)
{
    <p>Enter a product name and click Search to start.</p>
}
else if (displayedProducts.Count == 0)
{
    <p>No products found.</p>
}
else
{
    <div>
        @foreach (var product in displayedProducts)
        {
            <div>
                <h4>@product.Name</h4>
                <p>@product.Description</p>
                <p>@product.Price.ToString("C")</p>
                <a href="@($"/catalog/productdetails/{product.Id}")">View Details</a>
            </div>
        }
    </div>

    <div>
        <button disabled="@IsFirstPage" @onclick="GoToPreviousPage">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button disabled="@IsLastPage" @onclick="GoToNextPage">Next</button>
    </div>
}

@code {
    private const int PageSize = 10;
    private string searchText = "";
    private List<Product> products;
    private List<Product> displayedProducts;
    private int currentPage = 1;
    private int totalPages;
    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage == totalPages;

    // todo - temporary model
    private class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
    }

    private void Search()
    {
        // todo
        // perform the search using the searchText and assign the results to the products variable
        // dummy data
        products = Enumerable.Range(1, 100)
            .Where(i => $"Product {i}".Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .Select(i => new Product { Id = i, Name = $"Product {i}", Description = $"Description for Product {i}", Price = i * 10m })
            .ToList();

        CalculateTotalPages();
        UpdateDisplayedProducts();
    }

    private void CalculateTotalPages()
    {
        totalPages = (int)Math.Ceiling((double)products.Count / PageSize);
    }

    private void UpdateDisplayedProducts()
    {
        var startIndex = (currentPage - 1) * PageSize;
        displayedProducts = products.Skip(startIndex).Take(PageSize).ToList();
    }

    private void GoToPreviousPage()
    {
        if (!IsFirstPage)
        {
            currentPage--;
            UpdateDisplayedProducts();
        }
    }

    private void GoToNextPage()
    {
        if (!IsLastPage)
        {
            currentPage++;
            UpdateDisplayedProducts();
        }
    }
}
